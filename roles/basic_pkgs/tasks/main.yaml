- name: Proxmox pre-update steps
  block:

    - name: disable pve-enterprise repository (Proxmox)
      tags: proxmox
      lineinfile:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        regexp: 'pve-enterprise$'
        line: '#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise'

    - name: enable no-subscription repository (Proxmox)
      tags: proxmox
      lineinfile: 
        path: /etc/apt/sources.list
        line: deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription
        create: yes

    - name: remove proxmox subscription message
      tags: proxmox
      replace:
        path: /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
        before: 'No valid subscription'
        regexp: '[^/]Ext.Msg.show'
        replace: 'void({ //Ext.Msg.show'

  when: 
    - ansible_cmdline['root'] == "/dev/mapper/pve-root"
    - ansible_distribution == 'Debian'

- name: upgrade (Ubuntu/Debian)
  tags: upgrade
  apt:
    update_cache: yes
    cache_valid_time: 18000
    upgrade: dist
  when: ansible_distribution in ["Ubuntu", "Debian","Zorin OS"]
  register: upgrade

- name: upgrade (Alpine)
  tags: upgrade
  apk:
    update_cache: yes
    upgrade: yes
  when: ansible_distribution == "Alpine"

- name: pre upgrade steps (Rocky Linux)
  tags: upgrade
  block:

    - name: install Epel repository
      dnf:
        name: epel-release
        state: latest
      register: epel

    - name: enable PowerTools repository
      shell:
        cmd: "dnf config-manager --set-enabled powertools"
      when: epel.changed

    - name: install Remi repository
      dnf:
        name: "http://rpms.remirepo.net/enterprise/remi-release-8.rpm"
        state: latest
        disable_gpg_check: yes
      register: remi

    - name: enable php 8.0
      shell:
        cmd: "dnf module enable php:remi-8.0 -y"
      when: remi.changed

  when: ansible_distribution in ["Rocky"]

- name: upgrade (Rocky, Fedora)
  tags: upgrade
  shell:
    cmd: 'dnf --refresh update -y'
  when: ansible_distribution in ["Rocky", "Fedora"]

- name: install the basic packages
  tags: install
  package:
    name: [htop,ripgrep,tar,neofetch,tree,zsh,ranger,unzip,git,speedtest-cli,wget,curl,tmux,rsync,"{{ locate }}","{{ numlockx }}"]
    state: latest


- name: install more basic packages for Alpine
  tags: install
  apk:
    name: [lsof,less,lsblk,util-linux]
    state: latest
  when: ansible_distribution == "Alpine"

- name: add a cron job for updatedb (locate) every 10min
  tags: install
  cron:
    name: "Update database for locate"
    minute: "*/5"
    job: "updatedb"

- name: install dark mode for Proxmox
  tags: upgrade
  shell:
    cmd: bash <(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) install
    executable: /bin/bash
  when: 
    - ansible_cmdline['root'] == "/dev/mapper/pve-root"
    - upgrade.changed
  ignore_errors: true

    #- name: delete fzf folder
    #  file:
    #    path: "{{ item }}"
    #    state: absent
    #  tags: fzf
    #  loop:
    #    - .fzf
    #    - .fzf.bash
    #    - .fzf.zsh
    #    - /home/ansible/.fzf
    #    - /home/ansible/.fzf.bash
    #    - /home/ansible/.fzf.zsh
    #  ignore_errors: true

# - name: change .fzf folder owner
#   tags: fzf
#   file:
#     path: /home/ansible/.fzf
#     owner: root
#     group: root
#     recurse: yes
#   ignore_errors: true
# 
# - name: clone fzf repository
#   tags: fzf
#   git:
#     repo: https://github.com/junegunn/fzf.git
#     dest: .fzf
#     update: yes
#   register: fzf
# 
# - name: change .fzf folder owner
#   tags: fzf
#   file:
#     path: /home/ansible/.fzf
#     owner: ansible
#     group: ansible
#     recurse: yes
# 
# - name: install fzf if new version is available
#   tags: fzf
#   block:  
# 
#   - name: run fzf installer script
#     shell:
#       cmd: runuser -l ansible -c "echo 'y'| .fzf/install"
#   
#   - name: copy .fzf folder and bash and zsh extensions to user folder
#     copy:
#       src: "{{ item.1 }}"
#       dest: "/home/{{ item.0.name }}/"
#       remote_src: yes
#       owner: "{{ item.0.name }}"
#       group: "{{ item.0.name }}"
#       mode: preserve
#     loop: "{{ users | product(['.fzf','.fzf.bash','.fzf.zsh']) | list }}" 
#   
#   - name: change .fzf.bash and .fzf.zsh extensions to match users
#     replace:
#       path: "/home/{{ item.0.name }}/{{ item.1 }}"
#       regexp: 'ansible'
#       replace: "{{ item.0.name }}"
#     loop: "{{ users | product(['.fzf.bash','.fzf.zsh']) | list }}" 
# 
#   when: fzf.changed
