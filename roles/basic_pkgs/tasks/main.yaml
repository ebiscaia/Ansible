- name: Proxmox pre-update steps
  block:

    - name: disable pve-enterprise repository (Proxmox)
      tags: always
      lineinfile:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        regexp: 'pve-enterprise$'
        line: '#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise'

    - name: enable no-subscription repository (Proxmox)
      tags: always
      lineinfile: 
        path: /etc/apt/sources.list
        line: deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription
        create: yes

    - name: remove proxmox subscription message
      tags: always
      replace:
        path: /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
        before: 'No valid subscription'
        regexp: '[^/]Ext.Msg.show'
        replace: 'void({ //Ext.Msg.show'

  when: ansible_cmdline['root'] == "/dev/mapper/pve-root"

- name: upgrade (Ubuntu/Debian)
  tags: always
  apt:
    update_cache: yes
    cache_valid_time: 18000
    upgrade: dist
  when: ansible_distribution in ["Ubuntu", "Debian"]

- name: prepare and upgrade Alpine Linux
  block:

    - name: enable edge repositories
      tags: always
      shell:
        cmd: sed -i '2s/^http/#http/' /etc/apk/repositories; sed -i '4,5s/#http/http/' /etc/apk/repositories
    
    - name: upgrade (Alpine)
      tags: always
      apk:
        update_cache: yes
        upgrade: yes

  when: ansible_distribution == "Alpine"

- name: upgrade (Rocky)
  tags: always
  dnf:
    name: "*"
    state: latest
  when: ansible_distribution == "Rocky"

- name: install the basic packages
  tags: always
  package:
    name: [htop,neofetch,tree,zsh,ranger,unzip,git,"{{ vim }}",speedtest-cli,wget,curl,tmux,rsync,"{{ locate }}","{{ numlockx }}"]
    state: latest

- name: install more basic packages for Alpine
  tags: always
  apk:
    name: [lsof,less,lsblk,util-linux]
    state: latest
  when: ansible_distribution == "Alpine"

- name: add a cron job for updatedb (locate)  every 10min
  tags: always
  cron:
    name: "Update database for locate"
    minute: "*/5"
    job: "updatedb"

- name: check if dark mode is enabled
  tags: always
  stat:
    path: /root/.dark_mode_enabled.txt
  register: dark_mode

- name: verify and install dark mode for Proxmox
  block:

    - name: install dark mode for Proxmox
      tags: always
      shell:
        cmd: bash <(curl -s https://raw.githubusercontent.com/Weilbyte/PVEDiscordDark/master/PVEDiscordDark.sh ) install
        executable: /bin/bash
      register: dark_mode_enabled

    - name: create dark_mode_enabled file
      tags: always
      file:
        path: /root/.dark_mode_enabled.txt
        state: touch
      when: dark_mode_enabled.changed

  when: 
    - ansible_cmdline['root'] == "/dev/mapper/pve-root"
    - not dark_mode.stat.exists
